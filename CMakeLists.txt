CMAKE_MINIMUM_REQUIRED(VERSION 3.27.0)
CMAKE_POLICY(SET CMP0094 NEW)

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# TODO: Is that actually used?
INCLUDE(GenerateExportHeader)

SET(WITH_GLOBE ON CACHE BOOL "Enable globe")
if (WITH_GLOBE)
  list(APPEND VCPKG_MANIFEST_FEATURES "globe")
endif()

include(VcpkgToolchain)

PROJECT(kadas)
set(CMAKE_CXX_STANDARD 17)

SET(KADAS_NAME "Kadas" CACHE STRING "Kadas application name")
SET(KADAS_FULL_NAME "Kadas Albireo" CACHE STRING "Kadas full application name")
SET(KADAS_VERSION_MAJOR "2")
SET(KADAS_VERSION_MINOR "2")
SET(KADAS_VERSION_PATCH "2")
SET(KADAS_VERSION_PRE "")
EXECUTE_PROCESS(COMMAND git rev-parse HEAD OUTPUT_VARIABLE KADAS_VERSION_DEV OUTPUT_STRIP_TRAILING_WHITESPACE)

FIND_PACKAGE(PkgConfig REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Network REQUIRED)
FIND_PACKAGE(Qt5DBus REQUIRED)
FIND_PACKAGE(Qt5OpenGL REQUIRED)
FIND_PACKAGE(Qt5PrintSupport REQUIRED)
FIND_PACKAGE(Qt5LinguistTools REQUIRED)
FIND_PACKAGE(Qt5Sql REQUIRED)
FIND_PACKAGE(Qt5Svg REQUIRED)
FIND_PACKAGE(Qt5Xml REQUIRED)
FIND_PACKAGE(Qt5Concurrent REQUIRED)
FIND_PACKAGE(Qt5Keychain REQUIRED)
FIND_PACKAGE(Qt5WebKitWidgets REQUIRED)
FIND_PACKAGE(QGIS REQUIRED)
FIND_PACKAGE(GDAL REQUIRED)
FIND_PACKAGE(GeographicLib REQUIRED)
FIND_PACKAGE(QuaZip-Qt5 REQUIRED)

get_target_property(QMAKE_EXECUTABLE Qt5::qmake LOCATION)

SET(CRASHRPT_LIBRARY "GdbCrashHandler" CACHE FILEPATH "Path to CrashRpt library")

PKG_CHECK_MODULES(QCA qca2-qt5)
IF(NOT QCA_FOUND)
    SET(QCA_INCLUDE_DIRS "" CACHE FILEPATH "Path to QCA headers")
    SET(QCA_LDFLAGS "" CACHE STRING "QCA library")
ENDIF(NOT QCA_FOUND)
PKG_CHECK_MODULES(QWT Qt5Qwt6)
IF(NOT QWT_FOUND)
    SET(QWT_INCLUDE_DIRS "" CACHE FILEPATH "Path to QWT headers")
    SET(QWT_LDFLAGS "" CACHE STRING "QWT library")
ENDIF(NOT QWT_FOUND)
PKG_CHECK_MODULES(GDAL gdal REQUIRED)
PKG_CHECK_MODULES(CAIRO cairo REQUIRED)
PKG_CHECK_MODULES(LIBRSVG librsvg-2.0 REQUIRED)
PKG_CHECK_MODULES(EXIV2 exiv2 REQUIRED)
PKG_CHECK_MODULES(SVG2SVGT svg2svgt REQUIRED)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES(${QGIS_INCLUDE_DIR})

SET(KADAS_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${KADAS_OUTPUT_DIRECTORY}/bin)
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${KADAS_OUTPUT_DIRECTORY}/lib)

FILE(WRITE "${CMAKE_BINARY_DIR}/output/bin/.kadasbuilddir")


SET(MILX_LICENSE_KEY CACHE STRING "")
IF(MILX_LICENSE_KEY STREQUAL "")
  MESSAGE(WARNING "Empty MilX license key, MilX will be unavailable")
ENDIF()

ADD_DEFINITIONS(-DMILX_LICENSE_KEY="${MILX_LICENSE_KEY}")
ADD_DEFINITIONS(-DWITH_QTWEBKIT)

ADD_SUBDIRECTORY(kadas)

set(WITH_BINDINGS ON CACHE BOOL "Build with python bindings")
if(WITH_BINDINGS)
  ADD_SUBDIRECTORY(python)
endif()

option(INSTALL_DEMO_DATA "Installs settings and templates" OFF)
IF(INSTALL_DEMO_DATA)
    install(FILES packaging/files/settings_full.ini packaging/files/settings_patch.ini DESTINATION ${CMAKE_INSTALL_PREFIX}/share/kadas/)
    install(DIRECTORY packaging/files/print_templates packaging/files/project_templates DESTINATION ${CMAKE_INSTALL_PREFIX}/share/kadas/)
ENDIF()

IF(UNIX)
    install(FILES com.sourcepole.kadas.desktop DESTINATION ${CMAKE_INSTALL_PREFIX}/share/applications/)
    install(FILES com.sourcepole.kadas.appdata.xml DESTINATION ${CMAKE_INSTALL_PREFIX}/share/metainfo/)
    install(FILES kadas/resources/logo.png RENAME kadas.png DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/128x128/apps)
ENDIF()
