/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * kadas/analysis/kadasninecellfilter.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/







class KadasNineCellFilter /Abstract/
{
%Docstring(signature="appended")
*************************************************************************

This program is free software; you can redistribute it and/or modify  *
it under the terms of the GNU General Public License as published by  *
the Free Software Foundation; either version 2 of the License, or     *
(at your option) any later version.                                   *

**************************************************************************
%End

%TypeHeaderCode
#include "kadas/analysis/kadasninecellfilter.h"
%End
  public:
    KadasNineCellFilter( const QgsRasterLayer *layer, const QString &outputFile, const QString &outputFormat, const QgsRectangle &filterRegion = QgsRectangle(), const QgsCoordinateReferenceSystem &filterRegionCrs = QgsCoordinateReferenceSystem() );
%Docstring
Constructor that takes input file, output file and output format (GDAL string)*/
%End
    virtual ~KadasNineCellFilter();

    int processRaster( QProgressDialog *p, QString &errorMsg );
%Docstring
Starts the calculation, reads from mInputFile and stores the result in mOutputFile
@param p progress dialog that receives update and that is checked for abort. 0 if no progress bar is needed.
@return 0 in case of success*
%End

    double cellSizeX() const;
    void setCellSizeX( double size );
    double cellSizeY() const;
    void setCellSizeY( double size );

    double zFactor() const;
    void setZFactor( double factor );
%Docstring
Set to -1 to automatically compute */
%End

    double inputNodataValue() const;
    void setInputNodataValue( double value );
    double outputNodataValue() const;
    void setOutputNodataValue( double value );

    virtual float processNineCellWindow(
      float *x11, float *x21, float *x31,
      float *x12, float *x22, float *x32,
      float *x13, float *x23, float *x33
    ) = 0;
%Docstring
nodata value if not present or outside of the border. Must be implemented by subclasses
%End

    static bool computeWindow( GDALDatasetH dataset, const QgsCoordinateReferenceSystem &datasetCrs, const QgsRectangle &region, const QgsCoordinateReferenceSystem &regionCrs, int &rowStart, int &rowEnd, int &colStart, int &colEnd );
%Docstring
Computes the window of the raster which contains the specified region of the raster
%End

  protected:
    float calcFirstDerX( float *x11, float *x21, float *x31, float *x12, float *x22, float *x32, float *x13, float *x23, float *x33 );
%Docstring
Calculates the first order derivative in x-direction according to Horn (1981)*/
%End
    float calcFirstDerY( float *x11, float *x21, float *x31, float *x12, float *x22, float *x32, float *x13, float *x23, float *x33 );
%Docstring
Calculates the first order derivative in y-direction according to Horn (1981)*/
%End


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * kadas/analysis/kadasninecellfilter.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
