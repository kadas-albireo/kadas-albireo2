/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * kadas/gui/mapitems/kadasmapitem.h                                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/








class KadasMapPos
{
%Docstring(signature="appended")
*************************************************************************

This program is free software; you can redistribute it and/or modify  *
it under the terms of the GNU General Public License as published by  *
the Free Software Foundation; either version 2 of the License, or     *
(at your option) any later version.                                   *

**************************************************************************
%End

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
  public:
    static KadasMapPos fromPoint( const QgsPointXY &pos );

    KadasMapPos( double x = 0., double y = 0. );
    double x() const;
    void setX( double x );
    double y() const;
    void setY( double y );
    operator QgsPointXY() const;
    double sqrDist( const KadasMapPos &p ) const;
};

class KadasMapRect
{

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
  public:
    KadasMapRect( double xMin = 0., double yMin = 0., double xMax = 0., double yMax = 0. );
    KadasMapRect( const KadasMapPos &p1, const KadasMapPos &p2 );
    KadasMapRect( const KadasMapPos &center, double span );
    double xMinimum() const;
    void setXMinimum( double xMin );
    double yMinimum() const;
    void setYMinimum( double yMin );
    double xMaximum() const;
    void setXMaximum( double xMax );
    double yMaximum() const;
    void setYMaximum( double ymax );
    operator QgsRectangle() const;
    KadasMapPos center() const;
};

class KadasItemPos
{

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
  public:
    static KadasItemPos fromPoint( const QgsPointXY &pos );

    KadasItemPos( double x = 0., double y = 0 );

    double x() const;
    void setX( double x );
    double y() const;
    void setY( double y );
    double z() const;
    void setZ( double z );
    bool hasZ() const;
    operator QgsPointXY() const;
    operator QgsPoint() const;
    double sqrDist( const KadasItemPos &p ) const;
};

class KadasItemRect
{

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
  public:
    KadasItemRect( double xMin = 0., double yMin = 0., double xMax = 0., double yMax = 0. );
    KadasItemRect( const KadasItemPos &p1, const KadasItemPos &p2 );
    double xMinimum() const;
    void setXMinimum( double xMin );
    double yMinimum() const;
    void setYMinimum( double yMin );
    double xMaximum() const;
    void setXMaximum( double xMax );
    double yMaximum() const;
    void setYMaximum( double ymax );
    operator QgsRectangle() const;
    KadasItemPos center() const;
};


//
// adapted from PyQt5 QPair<_TYPE1_, _TYPE2_> and QPair<float, float>
//
%MappedType QPair<KadasMapPos, double> / TypeHint = "Tuple[KadasMapPos, float]" /
{
%TypeHeaderCode
#include <QPair>
%End

%ConvertFromTypeCode
  KadasMapPos *first = new KadasMapPos( sipCpp->first );
  PyObject *t = sipBuildResult( NULL, "(Nf)", first, sipType_KadasMapPos,
                                sipTransferObj, sipCpp->second );

  if ( !t )
  {
    delete first;

    return 0;
  }

  return t;
%End

%ConvertToTypeCode
  if ( !sipIsErr )
    return ( PySequence_Check( sipPy ) && !PyUnicode_Check( sipPy ) );

  Py_ssize_t len = PySequence_Size( sipPy );

  if ( len != 2 )
  {
    // A negative length should only be an internal error so let the
    // original exception stand.
    if ( len >= 0 )
      PyErr_Format( PyExc_TypeError,
                    "sequence has %zd elements but 2 elements are expected",
                    len );

    *sipIsErr = 1;

    return 0;
  }

  PyObject *firstobj = PySequence_GetItem( sipPy, 0 );

  if ( !firstobj )
  {
    *sipIsErr = 1;

    return 0;
  }

  int firststate;
  KadasMapPos *first = reinterpret_cast<KadasMapPos *>(
    sipForceConvertToType( firstobj, sipType_KadasMapPos, sipTransferObj,
                           SIP_NOT_NONE, &firststate, sipIsErr ) );

  if ( *sipIsErr )
  {
    PyErr_Format( PyExc_TypeError,
                  "the first element has type '%s' but 'KadasMapPos' is expected",
                  sipPyTypeName( Py_TYPE( firstobj ) ) );

    return 0;
  }

  PyObject *secondobj = PySequence_GetItem( sipPy, 1 );

  if ( !secondobj )
  {
    sipReleaseType( first, sipType_KadasMapPos, firststate );
    Py_DECREF( firstobj );
    *sipIsErr = 1;

    return 0;
  }

  double second = PyFloat_AsDouble( secondobj );

  if ( PyErr_Occurred() )
  {
    if ( PyErr_ExceptionMatches( PyExc_TypeError ) )
      PyErr_Format( PyExc_TypeError,
                    "the second element has type '%s' but 'float' is expected",
                    sipPyTypeName( Py_TYPE( secondobj ) ) );

    Py_DECREF( secondobj );
    sipReleaseType( first, sipType_KadasMapPos, firststate );
    Py_DECREF( firstobj );
    *sipIsErr = 1;

    return 0;
  }

  *sipCppPtr = new QPair<KadasMapPos, double>( *first, second );

  Py_DECREF( secondobj );
  sipReleaseType( first, sipType_KadasMapPos, firststate );
  Py_DECREF( firstobj );

  return sipGetState( sipTransferObj );
%End
};


class KadasMapItem : QObject /Abstract/
{

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
  public:
    KadasMapItem( const QgsCoordinateReferenceSystem &crs );
    ~KadasMapItem();
    KadasMapItem *clone() const;
    QJsonObject serialize() const;
    bool deserialize( const QJsonObject &json );

    virtual QString itemName() const = 0;

    const QgsCoordinateReferenceSystem &crs() const;
%Docstring
The item crs */
%End

    virtual KadasItemRect boundingBox() const = 0;
%Docstring
Bounding box in geographic coordinates */
%End

    struct Margin
    {
      int left;
      int top;
      int right;
      int bottom;
    };
    virtual Margin margin() const;

    struct Node
    {
      KadasMapPos pos;
      // TODO
    };

    virtual QList<KadasMapItem::Node> nodes( const QgsMapSettings &settings ) const = 0;

    virtual bool intersects( const KadasMapRect &rect, const QgsMapSettings &settings, bool contains = false ) const = 0;
%Docstring
Hit test, rect in item crs */
%End
    virtual bool hitTest( const KadasMapPos &pos, const QgsMapSettings &settings ) const;

    virtual QPair<KadasMapPos, double> closestPoint( const KadasMapPos &pos, const QgsMapSettings &settings ) const;
%Docstring
Return the item point to the specified one */
%End

    virtual void render( QgsRenderContext &context ) const = 0;
%Docstring
Render the item */
%End


    void associateToLayer( QgsMapLayer *layer );
%Docstring
Associate to layer */
%End
    QgsMapLayer *associatedLayer() const;

    void setOwnerLayer( KadasItemLayer *layer );
%Docstring
Owner layer */
%End
    KadasItemLayer *ownerLayer() const;

    void setSelected( bool selected );
%Docstring
Selected state */
%End
    bool selected() const;

    void setZIndex( int zIndex );
%Docstring
z-index */
%End
    int zIndex() const;

    void setSymbolScale( double scale );
%Docstring
symbol scale */
%End
    double symbolScale() const;

    void setAuthId( const QString &authId );
%Docstring
authid */
%End
    QString authId() const;

    void setTooltip( const QString &tooltip );
%Docstring
tooltip */
%End
    const QString &tooltip() const;

    void setVisible( bool visible );
%Docstring
visibility */
%End
    bool isVisible() const;

    bool isPointSymbol() const;
    virtual QImage symbolImage() const;
    virtual QPointF symbolAnchor() const;

    void update();
%Docstring
Trigger a redraw */
%End

    class State : KadasStateHistory::State
{

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
      public:
        enum class DrawStatus
        {
          Empty,
          Drawing,
          Finished
        };
        DrawStatus drawStatus;
        virtual void assign( const State *other ) = 0;
        virtual State *clone() const = 0 /Factory/;
        virtual QJsonObject serialize() const = 0;
        virtual bool deserialize( const QJsonObject &json ) = 0;
    };
    const State *constState() const;
    virtual void setState( const State *state );

    class NumericAttribute
{

%TypeHeaderCode
#include "kadas/gui/mapitems/kadasmapitem.h"
%End
    public:
        QString name;
        enum class Type
        {
          TypeCoordinate,
          TypeDistance,
          TypeAngle,
          TypeOther
        };
        Type type;
        double min;
        double max;
        int decimals;
        int precision( const QgsMapSettings &mapSettings ) const;
        QString suffix( const QgsMapSettings &mapSettings ) const;
    };
    typedef QMap<int, KadasMapItem::NumericAttribute> AttribDefs;
    typedef QMap<int, double> AttribValues;


    virtual void clear();
    virtual bool startPart( const KadasMapPos &firstPoint, const QgsMapSettings &mapSettings ) = 0;
    virtual bool startPart( const AttribValues &values, const QgsMapSettings &mapSettings ) = 0;
    virtual void setCurrentPoint( const KadasMapPos &p, const QgsMapSettings &mapSettings ) = 0;
    virtual void setCurrentAttributes( const AttribValues &values, const QgsMapSettings &mapSettings ) = 0;
    virtual bool continuePart( const QgsMapSettings &mapSettings ) = 0;
    virtual void endPart() = 0;

    virtual AttribDefs drawAttribs() const = 0;
    virtual AttribValues drawAttribsFromPosition( const KadasMapPos &pos, const QgsMapSettings &mapSettings ) const = 0;
    virtual KadasMapPos positionFromDrawAttribs( const AttribValues &values, const QgsMapSettings &mapSettings ) const = 0;

    struct EditContext
    {
      EditContext();

      EditContext( const QgsVertexId &_vidx, const KadasMapPos &_pos = KadasMapPos(), const AttribDefs &_attributes = KadasMapItem::AttribDefs(), Qt::CursorShape _cursor = Qt::CrossCursor );

      bool mValid;
      QgsVertexId vidx;
      KadasMapPos pos;
      AttribDefs attributes;
      Qt::CursorShape cursor;
      bool isValid() const;
      bool operator== ( const EditContext &other ) const;
      bool operator!= ( const EditContext &other ) const;
    };
    virtual EditContext getEditContext( const KadasMapPos &pos, const QgsMapSettings &mapSettings ) const = 0;
    virtual void edit( const EditContext &context, const KadasMapPos &newPoint, const QgsMapSettings &mapSettings ) = 0;
    virtual void edit( const EditContext &context, const AttribValues &values, const QgsMapSettings &mapSettings ) = 0;

    enum class ContextMenuActions
    {
      EditNoAction,
      EditSwitchToDrawingTool
    };
    virtual void populateContextMenu( QMenu *menu, const EditContext &context, const KadasMapPos &clickPos, const QgsMapSettings &mapSettings );
    virtual void onDoubleClick( const QgsMapSettings &mapSettings );

    virtual AttribValues editAttribsFromPosition( const EditContext &context, const KadasMapPos &pos, const QgsMapSettings &mapSettings ) const = 0;
    virtual KadasMapPos positionFromEditAttribs( const EditContext &context, const AttribValues &values, const QgsMapSettings &mapSettings ) const = 0;

    void setEditor( const QString &editor );
    const QString &editor() const;

    virtual KadasItemPos position() const = 0;
    virtual void setPosition( const KadasItemPos &pos ) = 0;


    QDomElement writeXml( QDomDocument &document ) const;
    static KadasMapItem *fromXml( const QDomElement &element );

    void preventAttachmentCleanup();

    QMap<QString, QVariant> getProps() const;
    void setProps( const QMap<QString, QVariant> &props );

  signals:
    void aboutToBeDestroyed();
    void changed();
    void propertyChanged();

  protected:

    virtual KadasMapItem::State *createEmptyState() const = 0 /Factory/;

    static void defaultNodeRenderer( QPainter *painter, const QPointF &screenPoint, int nodeSize );
    static void anchorNodeRenderer( QPainter *painter, const QPointF &screenPoint, int nodeSize );
    static double outputDpiScale( const QgsRenderContext &context );

    KadasMapPos toMapPos( const KadasItemPos &itemPos, const QgsMapSettings &settings ) const;
    KadasItemPos toItemPos( const KadasMapPos &mapPos, const QgsMapSettings &settings ) const;
    KadasMapRect toMapRect( const KadasItemRect &itemRect, const QgsMapSettings &settings ) const;
    KadasItemRect toItemRect( const KadasMapRect &itemRect, const QgsMapSettings &settings ) const;
    double pickTolSqr( const QgsMapSettings &settings ) const;
    double pickTol( const QgsMapSettings &settings ) const;
    void cleanupAttachment( const QString &filePath ) const;

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * kadas/gui/mapitems/kadasmapitem.h                                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
