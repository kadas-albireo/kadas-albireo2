/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * kadas/gui/kadasitemlayer.h                                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






// clang-format off
//
// copied from PyQt4 QMap<int, TYPE> and adapted to unsigned
//
%MappedType QMap<unsigned, KadasMapItem *>
{
%TypeHeaderCode
#include <QMap>
%End

%ConvertFromTypeCode
  // Create the dictionary.
  PyObject *d = PyDict_New();

  if ( !d )
    return NULL;

  // Set the dictionary elements.
  QMap<unsigned, KadasMapItem *>::const_iterator i = sipCpp->constBegin();

  while ( i != sipCpp->constEnd() )
  {
    KadasMapItem *t2 = i.value();

    PyObject *t1obj = PyLong_FromLong( i.key() );
    PyObject *t2obj = sipConvertFromType( t2, sipType_KadasMapItem, sipTransferObj );

    if ( t1obj == NULL || t2obj == NULL || PyDict_SetItem( d, t1obj, t2obj ) < 0 )
    {
      Py_DECREF( d );

      if ( t1obj )
        Py_DECREF( t1obj );

      if ( t2obj )
        Py_DECREF( t2obj );
      else
        delete t2;

      return NULL;
    }

    Py_DECREF( t1obj );
    Py_DECREF( t2obj );

    ++i;
  }

  return d;
%End

%ConvertToTypeCode
  PyObject * t1obj, *t2obj;
  Py_ssize_t i = 0;

  // Check the type if that is all that is required.
  if ( sipIsErr == NULL )
  {
    if ( !PyDict_Check( sipPy ) )
      return 0;

    while ( PyDict_Next( sipPy, &i, &t1obj, &t2obj ) )
    {
      if ( !sipCanConvertToType( t2obj, sipType_KadasMapItem, SIP_NOT_NONE ) )
        return 0;
    }

    return 1;
  }

  QMap<unsigned, KadasMapItem *> *qm = new QMap<unsigned, KadasMapItem *>;

  while ( PyDict_Next( sipPy, &i, &t1obj, &t2obj ) )
  {
    int state2;

    unsigned t1 = PyLong_AsLong( t1obj );
    KadasMapItem *t2 = reinterpret_cast<KadasMapItem *>( sipConvertToType( t2obj, sipType_KadasMapItem, sipTransferObj, SIP_NOT_NONE, &state2, sipIsErr ) );

    if ( *sipIsErr )
    {
      sipReleaseType( t2, sipType_KadasMapItem, state2 );

      delete qm;
      return 0;
    }

    qm->insert( t1, t2 );

    sipReleaseType( t2, sipType_KadasMapItem, state2 );
  }

  *sipCppPtr = qm;

  return sipGetState( sipTransferObj );
%End
};
// clang-format on

class KadasItemLayer : KadasPluginLayer
{

%TypeHeaderCode
#include "kadas/gui/kadasitemlayer.h"
%End
  public:
    typedef unsigned ItemId;
    static const ItemId ITEM_ID_NULL;

    enum class PickObjective
    {
      PICK_OBJECTIVE_ANY,
      PICK_OBJECTIVE_TOOLTIP
    };

    static QString layerType();
    KadasItemLayer( const QString &name, const QgsCoordinateReferenceSystem &crs );
    ~KadasItemLayer();
    virtual QString layerTypeKey() const;
    virtual bool acceptsItem( const KadasMapItem *item ) const;

    ItemId addItem( KadasMapItem *item /Transfer/ );
    void lowerItem( const ItemId &itemId );
    void raiseItem( const ItemId &itemId );
    KadasMapItem *takeItem( const ItemId &itemId ) /Transfer/;
    const QMap<KadasItemLayer::ItemId, KadasMapItem *> &items() const;

    virtual KadasItemLayer *clone() const /Factory/;

    virtual QgsMapLayerRenderer *createMapRenderer( QgsRenderContext &rendererContext );

    virtual QgsRectangle extent() const;

    virtual bool readXml( const QDomNode &layer_node, QgsReadWriteContext &context );

    virtual bool writeXml( QDomNode &layer_node, QDomDocument &document, const QgsReadWriteContext &context ) const;

    virtual KadasItemLayer::ItemId pickItem( const KadasMapPos &mapPos, const QgsMapSettings &mapSettings, KadasItemLayer::PickObjective pickObjective = KadasItemLayer::PickObjective::PICK_OBJECTIVE_ANY ) const;
    KadasItemLayer::ItemId pickItem( const QgsRectangle &pickRect, const QgsMapSettings &mapSettings ) const;



    void setSymbolScale( double scale );
    double symbolScale() const;

  signals:
    void itemAdded( KadasItemLayer::ItemId itemId );
    void itemRemoved( KadasItemLayer::ItemId itemId );

  protected:
    KadasItemLayer( const QString &name, const QgsCoordinateReferenceSystem &crs, const QString &layerType );

};

class KadasItemLayerType : KadasPluginLayerType
{

%TypeHeaderCode
#include "kadas/gui/kadasitemlayer.h"
%End
  public:
    KadasItemLayerType();
    virtual QgsPluginLayer *createLayer( const QString &uri ) /Factory/;
    virtual void addLayerTreeMenuActions( QMenu *menu, QgsPluginLayer *layer ) const;

};

class KadasItemLayerRegistry : QObject
{

%TypeHeaderCode
#include "kadas/gui/kadasitemlayer.h"
%End
  public:
    enum class StandardLayer
    {
      RedliningLayer,
      SymbolsLayer,
      PicturesLayer,
      PinsLayer,
      RoutesLayer
    };
    static KadasItemLayer *getOrCreateItemLayer( StandardLayer layer );
    static const QMap<KadasItemLayerRegistry::StandardLayer, QString> &standardLayerNames();
    static QList<KadasItemLayer *> getItemLayers();
    static void init();

  protected:
    KadasItemLayerRegistry();

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * kadas/gui/kadasitemlayer.h                                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
