From cd4e63a4563df8cd89ef5c65f6f55661abb17049 Mon Sep 17 00:00:00 2001
From: Matthias Kuhn <matthias@opengis.ch>
Date: Fri, 30 May 2025 17:23:48 +0200
Subject: [PATCH] Fix navigation speed

---
 src/3d/qgscameracontroller.cpp | 115 ++++++++++++++++++++++-----------
 src/3d/qgscameracontroller.h   |  41 ++++++++++++
 2 files changed, 117 insertions(+), 39 deletions(-)

diff --git a/src/3d/qgscameracontroller.cpp b/src/3d/qgscameracontroller.cpp
index 86acb878c27..012822be65e 100644
--- a/src/3d/qgscameracontroller.cpp
+++ b/src/3d/qgscameracontroller.cpp
@@ -511,6 +511,56 @@ bool QgsCameraController::screenPointToWorldPos( QPoint position, double &depth,
   return true;
 }
 
+bool QgsCameraController::screenPointToRay( float x, float y, QVector3D &rayOrigin, QVector3D &rayDirection )
+{
+  if ( !mCamera )
+    return false;
+
+  QSize viewportSize = mScene->engine()->size();
+  float ndcX = 2.0f * x / viewportSize.width() - 1.0f;
+  float ndcY = 1.0f - 2.0f * y / viewportSize.height();
+
+  QVector4D nearClip( ndcX, ndcY, -1.0f, 1.0f );
+  QVector4D farClip( ndcX, ndcY, 1.0f, 1.0f );
+
+  // âœ… Use world-space positions for eye and center
+  QVector3D eye = mCamera->position() + mOrigin.toVector3D();
+  QVector3D center = mCamera->viewCenter() + mOrigin.toVector3D();
+  QVector3D up = mCamera->upVector();
+
+  QMatrix4x4 viewMatrix;
+  viewMatrix.lookAt( eye, center, up );
+
+  QMatrix4x4 projectionMatrix = mCamera->projectionMatrix();
+  QMatrix4x4 inverse = ( projectionMatrix * viewMatrix ).inverted();
+
+  QVector4D nearWorld = inverse * nearClip;
+  QVector4D farWorld = inverse * farClip;
+  if ( nearWorld.w() == 0.0f || farWorld.w() == 0.0f )
+    return false;
+
+  nearWorld /= nearWorld.w();
+  farWorld /= farWorld.w();
+
+  rayOrigin = nearWorld.toVector3D();
+  rayDirection = ( farWorld - nearWorld ).toVector3D().normalized();
+  return true;
+}
+
+bool QgsCameraController::intersectRayWithPlane( const QVector3D &rayOrigin, const QVector3D &rayDir, const QVector3D &planeNormal, float planeD, QVector3D &intersection )
+{
+  float denom = QVector3D::dotProduct( rayDir, planeNormal );
+  if ( std::abs( denom ) < 1e-6 )
+    return false; // Parallel
+
+  float t = -( QVector3D::dotProduct( rayOrigin, planeNormal ) + planeD ) / denom;
+  if ( t < 0.0f )
+    return false; // Behind the ray
+
+  intersection = rayOrigin + t * rayDir;
+  return true;
+}
+
 void QgsCameraController::onPositionChangedTerrainNavigation( Qt3DInput::QMouseEvent *mouse )
 {
   if ( mIgnoreNextMouseMove )
@@ -566,53 +616,38 @@ void QgsCameraController::onPositionChangedTerrainNavigation( Qt3DInput::QMouseE
   }
   else if ( hasLeftButton && !hasShift && !hasCtrl )
   {
-    // translation works as if one grabbed a point on the 3D viewer and dragged it
     setMouseParameters( MouseOperation::Translation, mMousePos );
 
-    if ( !mDepthBufferIsReady )
-      return;
-
-    if ( !mDragPointCalculated )
+    QVector3D rayOrigin, rayDir;
+    if ( !mDragging )
     {
-      double depth;
-      QVector3D worldPosition;
-      if ( screenPointToWorldPos( mClickPoint, depth, worldPosition ) )
+      if ( screenPointToRay( mClickPoint.x(), mClickPoint.y(), rayOrigin, rayDir ) )
       {
-        mDragDepth = depth;
-        mDragPoint = worldPosition;
-        mDragPointCalculated = true;
+        QVector3D intersection;
+        if ( intersectRayWithPlane( rayOrigin, rayDir, QVector3D( 0, 0, 1 ), 0.0f, intersection ) )
+        {
+          mDragStartPoint = intersection;
+          mDragPlaneZ = intersection.z();
+          mDragging = true;
+        }
       }
     }
-
-    QVector3D cameraBeforeDragPos = mCameraBefore->position();
-
-    QVector3D moveToPosition = Qgs3DUtils::screenPointToWorldPos( mMousePos, mDragDepth, mScene->engine()->size(), mCameraBefore.get() );
-    QVector3D cameraBeforeToMoveToPos = ( moveToPosition - mCameraBefore->position() ).normalized();
-    QVector3D cameraBeforeToDragPointPos = ( mDragPoint - mCameraBefore->position() ).normalized();
-
-    // Make sure the rays are not horizontal (add small z shift if it is)
-    if ( cameraBeforeToMoveToPos.z() == 0 )
-    {
-      cameraBeforeToMoveToPos.setZ( 0.01 );
-      cameraBeforeToMoveToPos = cameraBeforeToMoveToPos.normalized();
-    }
-
-    if ( cameraBeforeToDragPointPos.z() == 0 )
+    else
     {
-      cameraBeforeToDragPointPos.setZ( 0.01 );
-      cameraBeforeToDragPointPos = cameraBeforeToDragPointPos.normalized();
+      if ( screenPointToRay( mouse->x(), mouse->y(), rayOrigin, rayDir ) )
+      {
+        QVector3D intersection;
+        if ( intersectRayWithPlane( rayOrigin, rayDir, QVector3D( 0, 0, 1 ), -mDragPlaneZ, intersection ) )
+        {
+          QVector3D initialLocal = mDragStartPoint - mOrigin.toVector3D();
+          QVector3D currentLocal = intersection - mOrigin.toVector3D();
+          QVector3D movement = initialLocal - currentLocal;
+
+          mCameraPose.setCenterPoint( mCameraPose.centerPoint() + movement );
+          updateCameraFromPose();
+        }
+      }
     }
-
-    double d1 = ( mDragPoint.z() - cameraBeforeDragPos.z() ) / cameraBeforeToMoveToPos.z();
-    double d2 = ( mDragPoint.z() - cameraBeforeDragPos.z() ) / cameraBeforeToDragPointPos.z();
-
-    QVector3D from = cameraBeforeDragPos + d1 * cameraBeforeToMoveToPos;
-    QVector3D to = cameraBeforeDragPos + d2 * cameraBeforeToDragPointPos;
-
-    QVector3D shiftVector = to - from;
-
-    mCameraPose.setCenterPoint( mCameraBefore->viewCenter() + shiftVector );
-    updateCameraFromPose();
   }
   else if ( hasLeftButton && hasShift && hasCtrl )
   {
@@ -893,6 +928,8 @@ void QgsCameraController::onMouseReleased( Qt3DInput::QMouseEvent *mouse )
   if ( !mInputHandlersEnabled )
     return;
 
+  mDragging = false;
+  mDragPlaneZ = 0.0f;
 
   setMouseParameters( MouseOperation::None );
 }
diff --git a/src/3d/qgscameracontroller.h b/src/3d/qgscameracontroller.h
index a6de4e52edf..a251ce84882 100644
--- a/src/3d/qgscameracontroller.h
+++ b/src/3d/qgscameracontroller.h
@@ -398,6 +398,30 @@ class _3D_EXPORT QgsCameraController : public QObject
     bool screenPointToWorldPos( QPoint position, double &depth, QVector3D &worldPosition );
 #endif
 
+    /**
+     * Calculates the intersection point between a ray and a plane in world space.
+     *
+     * The ray is defined by a world-space origin \a rayOrigin and normalized direction \a rayDir.
+     * The plane is described by a normal vector \a planeNormal and a distance from the origin \a planeD,
+     * following the equation dot(N, P) + D = 0.
+     *
+     * If the ray intersects the plane in front of the origin, the intersection point \a intersection
+     * is computed and returned. Returns FALSE if the ray is parallel to the plane or intersects behind the origin.
+     */
+    bool intersectRayWithPlane( const QVector3D &rayOrigin, const QVector3D &rayDir, const QVector3D &planeNormal, float planeD, QVector3D &intersection );
+
+    /**
+     * Converts a screen-space position to a 3D ray in world coordinates.
+     *
+     * This method transforms the 2D mouse position on the screen, given by \a x and \a y
+     * (in pixel coordinates), into a ray represented by a world-space origin \a rayOrigin
+     * and a normalized direction vector \a rayDirection. It uses the current camera's
+     * view and projection matrices, including world origin adjustments.
+     *
+     * Returns TRUE if the ray could be calculated successfully, FALSE otherwise.
+     */
+    bool screenPointToRay( float x, float y, QVector3D &rayOrigin, QVector3D &rayDirection );
+
     // Moves given point (in ECEF) by specified lat/lon angle difference (in degrees) and returns new ECEF point
     QgsVector3D moveGeocentricPoint( const QgsVector3D &point, double latDiff, double lonDiff );
 
@@ -437,6 +461,23 @@ class _3D_EXPORT QgsCameraController : public QObject
     QVector3D mDragPoint;
     double mDragDepth;
 
+    /**
+     * The world-space position where the terrain drag started.
+     * This is used to compute the movement delta from the initial clicked point.
+     */
+    QVector3D mDragStartPoint;
+
+    /**
+     * The Z coordinate of the drag plane (typically 0 for flat terrain).
+     * Used to constrain the drag interaction to a horizontal plane.
+     */
+    float mDragPlaneZ = 0.0f;
+    /**
+     * Whether a terrain drag operation is currently in progress.
+     * Set to true when the user clicks and drags over the terrain.
+     */
+    bool mDragging = false;
+
     bool mZoomPointCalculated = false;
     QVector3D mZoomPoint;
 
-- 
2.34.1

